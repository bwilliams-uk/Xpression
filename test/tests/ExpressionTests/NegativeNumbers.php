<?php

return new class extends ExpressionTest {
    public $expressions = [
        "(-5)^2" => 25,
        "0-(5^2)" => -25,
        "0-5^2" => -25,  
        "0-5*(-5)" => 25, 
        "0+(-5)*(-5)" => 25,
        "-5^2" => 25,
        "-5*-5" => 25,
        "5*(-5)" => -25,
        "(-5)*5" => -25,
        "2-2*2" => -2,
        "25-5^2" => 0,   
        "0--1"=>1,
        // //GPT Generated:
        '(-5) + 3' => -2,
        '(-8) - 2' => -10,
        '(-4) * (-3)' => 12,
        '(-10) / 2' => -5,
        '(-7) + (-3)' => -10,
        '(-15) / (-3)' => 5,
        '(-4) + 6 * (-2)' => -16,
        '(-2) + (-3) * (-4)' => 10,
        '5 + -3 * 4' => -7,
        '5+(-12)' => -7,
        '(-6) - (-2)' => -4,
        '(0-(-7)) + 3' => 10,
        '(-3) + (-2) * 5' => -13,
        '(-4) / (-2)' => 2,
        '(-8) + 2 * (-2)' => -12,
        '5 - (-3) * 2' => 11,
        '(-9) * (-2) + 4' => 22,
        '(-4) - (-7) + (-3)' => 0,   
        '(-6) * (-2) / 3' => 4,
        '(-3) + (-4) * (-2)' => 5,
        '(-5) + (-7) * 2' => -19,
        '(-8) - (-3) * 4' => 4,
        '(0-(-4)) + (-2) * (-3)' => 10,
        '(-3) + (-7) * 2' => -17,
        '(-5) * (-6) + (-3)' => 27,
        '(-8) / (-4) + (-3)' => -1,
        '-7 - 5 * -3' => 8,
        '(-9) * (-2) + (-5)' => 13,
        '(0-(-6)) + (-8) / 2' => 2,
        '(-3) - (-7) * (-2)' => -17,
        '(-10) + (-9) / 3' => -13,
        '(0-(-8)) + (-4) * 3' => -4,
        '(-5) * (-4) + (-6)' => 14,
        '(-7) / (-1) + (-2)' => 5,
        '(-8) * 2 - (-3)' => -13,
        '(0-(-5)) + (-4) * 2' => -3,
        '(-3) + (-9) * (-3)' => 24,
        '(-6) + 5 * (-2)' => -16,
        '(0-(-4)) - (-8) * (-1)' => -4,
        '(-10) / (-2) + (-3)' => 2,
        '(-7) * (-2) - (-5)' => 19,
        '(-5) + (-8) * 3' => -29,
        '(-9) - (-4) * 2' => -1,
        '(0-(-6)) + (-3) * 4' => -6,
        '(-4) * (-3) - (-2)' => 14,
        '(-8) + (-5) * (-3)' => 7,
        '(0-(-7)) - (-2) * 4' => 15,
        '(-6) * (-5) + (-3)' => 27,
        '(0-(-8)) + 3 * (-2)' => 2,
        '(-5) - (-9) * 3' => 22,
        '-10 + -6 * -4' => 14,
        '(0-(-9)) * 2 + (-7)' => 11,
        '(-7) + (-8) * 3' => -31,
        '(-4) - (-5) * (-2)' => -14,
        '(0-(-6)) + 2 * (-3)' => 0,
        '(-8) + (-7) * 4' => -36,
        '(-3) * (-4) - (-5)' => 17,
        '(0-(-7)) + (-3) * 3' => -2,
        '(-9) / (-3) + (-4)' => -1,
        '(0-(-5)) + (-8) * (-2)' => 21,
        '(-6) * (-7) + (-9)' => 33,
        '(0-(-10)) - (-6) * 2' => 22,
        '(-4) + (-9) * (-3)' => 23,
        '(0-(-7)) + 5 * (-2)' => -3,
        '(-8) * (-4) + (-2)' => 30,
        '(0-(-6)) + (-3) * (-5)' => 21,
        '(-9) + (-7) * 3' => -30,
        '(-10) / (-2) + (-4)' => 1,
        '(0-(-8)) + (-5) * 4' => -12,
        '(-3) + (-6) * (-2)' => 9,
        '(-7) / (-1) + (-5)' => 2,
        '(-4) * (-2) - (-6)' => 14,
        '(-9) + (-8) * 2' => -25,
        '(0-(-5)) + (-4) * (-3)' => 17,
        '(-7) * (-2) - (-9)' => 23,
        '(-8) + 5 * (-3)' => -23,
        '(0-(-6)) - (-9) * 4' => 42,
        '(-10) + (-7) * (-3)' => 11,
        '(-5) * (-6) - (-4)' => 34,
        '(-2) ^ 3' => -8,
        '(-4) ^ 2' => 16,
        '(-3) ^ 3' => -27,
        '(-5) ^ 2' => 25,
        '(-2) ^ (-2)' => 0.25,
        '(-4) ^ (-1)' => -0.25,
        '(-2) ^ 4' => 16,
        '(-3) ^ (-2)' => 0.11111111111111,
        '(0-(-2)) ^ 3' => 8,
        '(0-(-2)) ^ (-3)' => 0.125,
        '(-5) ^ 0' => 1,
        '(-1) ^ (-1)' => -1,
        '(-6) + (-3) ^ 2' => 3,
        '(-5) + (-3) ^ 3' => -32,
    ];
};
